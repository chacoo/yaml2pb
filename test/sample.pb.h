// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sample_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sample_2eproto;
class Drain;
struct DrainDefaultTypeInternal;
extern DrainDefaultTypeInternal _Drain_default_instance_;
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class Processor;
struct ProcessorDefaultTypeInternal;
extern ProcessorDefaultTypeInternal _Processor_default_instance_;
class Sample;
struct SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class Source;
struct SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Drain* Arena::CreateMaybeMessage<::Drain>(Arena*);
template<> ::Module* Arena::CreateMaybeMessage<::Module>(Arena*);
template<> ::Processor* Arena::CreateMaybeMessage<::Processor>(Arena*);
template<> ::Sample* Arena::CreateMaybeMessage<::Sample>(Arena*);
template<> ::Source* Arena::CreateMaybeMessage<::Source>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Module_ModuleType : int {
  Module_ModuleType_unknown = 0,
  Module_ModuleType_scaler = 1,
  Module_ModuleType_resampler = 2,
  Module_ModuleType_vp9 = 10,
  Module_ModuleType_h264 = 11,
  Module_ModuleType_h265 = 12,
  Module_ModuleType_h264_svc = 13,
  Module_ModuleType_pcma = 20,
  Module_ModuleType_pcmu = 21,
  Module_ModuleType_pcm = 22,
  Module_ModuleType_aac = 23,
  Module_ModuleType_mp3 = 24,
  Module_ModuleType_Module_ModuleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Module_ModuleType_Module_ModuleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Module_ModuleType_IsValid(int value);
constexpr Module_ModuleType Module_ModuleType_ModuleType_MIN = Module_ModuleType_unknown;
constexpr Module_ModuleType Module_ModuleType_ModuleType_MAX = Module_ModuleType_mp3;
constexpr int Module_ModuleType_ModuleType_ARRAYSIZE = Module_ModuleType_ModuleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Module_ModuleType_descriptor();
template<typename T>
inline const std::string& Module_ModuleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Module_ModuleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Module_ModuleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Module_ModuleType_descriptor(), enum_t_value);
}
inline bool Module_ModuleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Module_ModuleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Module_ModuleType>(
    Module_ModuleType_descriptor(), name, value);
}
enum Processor_ProcessMediaType : int {
  Processor_ProcessMediaType_unknown = 0,
  Processor_ProcessMediaType_audio = 1,
  Processor_ProcessMediaType_video = 2,
  Processor_ProcessMediaType_data = 3,
  Processor_ProcessMediaType_Processor_ProcessMediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Processor_ProcessMediaType_Processor_ProcessMediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Processor_ProcessMediaType_IsValid(int value);
constexpr Processor_ProcessMediaType Processor_ProcessMediaType_ProcessMediaType_MIN = Processor_ProcessMediaType_unknown;
constexpr Processor_ProcessMediaType Processor_ProcessMediaType_ProcessMediaType_MAX = Processor_ProcessMediaType_data;
constexpr int Processor_ProcessMediaType_ProcessMediaType_ARRAYSIZE = Processor_ProcessMediaType_ProcessMediaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Processor_ProcessMediaType_descriptor();
template<typename T>
inline const std::string& Processor_ProcessMediaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Processor_ProcessMediaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Processor_ProcessMediaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Processor_ProcessMediaType_descriptor(), enum_t_value);
}
inline bool Processor_ProcessMediaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Processor_ProcessMediaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Processor_ProcessMediaType>(
    Processor_ProcessMediaType_descriptor(), name, value);
}
enum Drain_DrainType : int {
  Drain_DrainType_unknown = 0,
  Drain_DrainType_mp4 = 1,
  Drain_DrainType_wav = 2,
  Drain_DrainType_Drain_DrainType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Drain_DrainType_Drain_DrainType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Drain_DrainType_IsValid(int value);
constexpr Drain_DrainType Drain_DrainType_DrainType_MIN = Drain_DrainType_unknown;
constexpr Drain_DrainType Drain_DrainType_DrainType_MAX = Drain_DrainType_wav;
constexpr int Drain_DrainType_DrainType_ARRAYSIZE = Drain_DrainType_DrainType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Drain_DrainType_descriptor();
template<typename T>
inline const std::string& Drain_DrainType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Drain_DrainType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Drain_DrainType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Drain_DrainType_descriptor(), enum_t_value);
}
inline bool Drain_DrainType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Drain_DrainType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Drain_DrainType>(
    Drain_DrainType_descriptor(), name, value);
}
// ===================================================================

class Source final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Source) */ {
 public:
  inline Source() : Source(nullptr) {}
  ~Source() override;
  explicit PROTOBUF_CONSTEXPR Source(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Source(const Source& from);
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Source& default_instance() {
    return *internal_default_instance();
  }
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }
  inline void Swap(Source* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Source& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Source& from) {
    Source::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Source";
  }
  protected:
  explicit Source(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessorsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string processors = 2;
  int processors_size() const;
  private:
  int _internal_processors_size() const;
  public:
  void clear_processors();
  const std::string& processors(int index) const;
  std::string* mutable_processors(int index);
  void set_processors(int index, const std::string& value);
  void set_processors(int index, std::string&& value);
  void set_processors(int index, const char* value);
  void set_processors(int index, const char* value, size_t size);
  std::string* add_processors();
  void add_processors(const std::string& value);
  void add_processors(std::string&& value);
  void add_processors(const char* value);
  void add_processors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processors();
  private:
  const std::string& _internal_processors(int index) const;
  std::string* _internal_add_processors();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Source)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class Module final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() override;
  explicit PROTOBUF_CONSTEXPR Module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Module& from) {
    Module::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Module";
  }
  protected:
  explicit Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Module_ModuleType ModuleType;
  static constexpr ModuleType unknown =
    Module_ModuleType_unknown;
  static constexpr ModuleType scaler =
    Module_ModuleType_scaler;
  static constexpr ModuleType resampler =
    Module_ModuleType_resampler;
  static constexpr ModuleType vp9 =
    Module_ModuleType_vp9;
  static constexpr ModuleType h264 =
    Module_ModuleType_h264;
  static constexpr ModuleType h265 =
    Module_ModuleType_h265;
  static constexpr ModuleType h264_svc =
    Module_ModuleType_h264_svc;
  static constexpr ModuleType pcma =
    Module_ModuleType_pcma;
  static constexpr ModuleType pcmu =
    Module_ModuleType_pcmu;
  static constexpr ModuleType pcm =
    Module_ModuleType_pcm;
  static constexpr ModuleType aac =
    Module_ModuleType_aac;
  static constexpr ModuleType mp3 =
    Module_ModuleType_mp3;
  static inline bool ModuleType_IsValid(int value) {
    return Module_ModuleType_IsValid(value);
  }
  static constexpr ModuleType ModuleType_MIN =
    Module_ModuleType_ModuleType_MIN;
  static constexpr ModuleType ModuleType_MAX =
    Module_ModuleType_ModuleType_MAX;
  static constexpr int ModuleType_ARRAYSIZE =
    Module_ModuleType_ModuleType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModuleType_descriptor() {
    return Module_ModuleType_descriptor();
  }
  template<typename T>
  static inline const std::string& ModuleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModuleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModuleType_Name.");
    return Module_ModuleType_Name(enum_t_value);
  }
  static inline bool ModuleType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModuleType* value) {
    return Module_ModuleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kSampleRateFieldNumber = 4,
    kChannelNumFieldNumber = 5,
    kBitrateFieldNumber = 6,
    kKeyFrameIntervalFieldNumber = 7,
  };
  // .Module.ModuleType type = 1;
  void clear_type();
  ::Module_ModuleType type() const;
  void set_type(::Module_ModuleType value);
  private:
  ::Module_ModuleType _internal_type() const;
  void _internal_set_type(::Module_ModuleType value);
  public:

  // int32 width = 2;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 3;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 sample_rate = 4;
  void clear_sample_rate();
  int32_t sample_rate() const;
  void set_sample_rate(int32_t value);
  private:
  int32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(int32_t value);
  public:

  // int32 channel_num = 5;
  void clear_channel_num();
  int32_t channel_num() const;
  void set_channel_num(int32_t value);
  private:
  int32_t _internal_channel_num() const;
  void _internal_set_channel_num(int32_t value);
  public:

  // int32 bitrate = 6;
  void clear_bitrate();
  int32_t bitrate() const;
  void set_bitrate(int32_t value);
  private:
  int32_t _internal_bitrate() const;
  void _internal_set_bitrate(int32_t value);
  public:

  // int32 key_frame_interval = 7;
  void clear_key_frame_interval();
  int32_t key_frame_interval() const;
  void set_key_frame_interval(int32_t value);
  private:
  int32_t _internal_key_frame_interval() const;
  void _internal_set_key_frame_interval(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Module)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    int32_t width_;
    int32_t height_;
    int32_t sample_rate_;
    int32_t channel_num_;
    int32_t bitrate_;
    int32_t key_frame_interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class Processor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Processor) */ {
 public:
  inline Processor() : Processor(nullptr) {}
  ~Processor() override;
  explicit PROTOBUF_CONSTEXPR Processor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Processor(const Processor& from);
  Processor(Processor&& from) noexcept
    : Processor() {
    *this = ::std::move(from);
  }

  inline Processor& operator=(const Processor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Processor& operator=(Processor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Processor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Processor* internal_default_instance() {
    return reinterpret_cast<const Processor*>(
               &_Processor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Processor& a, Processor& b) {
    a.Swap(&b);
  }
  inline void Swap(Processor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Processor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Processor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Processor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Processor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Processor& from) {
    Processor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Processor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Processor";
  }
  protected:
  explicit Processor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Processor_ProcessMediaType ProcessMediaType;
  static constexpr ProcessMediaType unknown =
    Processor_ProcessMediaType_unknown;
  static constexpr ProcessMediaType audio =
    Processor_ProcessMediaType_audio;
  static constexpr ProcessMediaType video =
    Processor_ProcessMediaType_video;
  static constexpr ProcessMediaType data =
    Processor_ProcessMediaType_data;
  static inline bool ProcessMediaType_IsValid(int value) {
    return Processor_ProcessMediaType_IsValid(value);
  }
  static constexpr ProcessMediaType ProcessMediaType_MIN =
    Processor_ProcessMediaType_ProcessMediaType_MIN;
  static constexpr ProcessMediaType ProcessMediaType_MAX =
    Processor_ProcessMediaType_ProcessMediaType_MAX;
  static constexpr int ProcessMediaType_ARRAYSIZE =
    Processor_ProcessMediaType_ProcessMediaType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProcessMediaType_descriptor() {
    return Processor_ProcessMediaType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProcessMediaType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessMediaType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessMediaType_Name.");
    return Processor_ProcessMediaType_Name(enum_t_value);
  }
  static inline bool ProcessMediaType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProcessMediaType* value) {
    return Processor_ProcessMediaType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 3,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .Module modules = 3;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  ::Module* mutable_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Module >*
      mutable_modules();
  private:
  const ::Module& _internal_modules(int index) const;
  ::Module* _internal_add_modules();
  public:
  const ::Module& modules(int index) const;
  ::Module* add_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Module >&
      modules() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Processor.ProcessMediaType type = 2;
  void clear_type();
  ::Processor_ProcessMediaType type() const;
  void set_type(::Processor_ProcessMediaType value);
  private:
  ::Processor_ProcessMediaType _internal_type() const;
  void _internal_set_type(::Processor_ProcessMediaType value);
  public:

  // @@protoc_insertion_point(class_scope:Processor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Module > modules_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class Drain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Drain) */ {
 public:
  inline Drain() : Drain(nullptr) {}
  ~Drain() override;
  explicit PROTOBUF_CONSTEXPR Drain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Drain(const Drain& from);
  Drain(Drain&& from) noexcept
    : Drain() {
    *this = ::std::move(from);
  }

  inline Drain& operator=(const Drain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Drain& operator=(Drain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Drain& default_instance() {
    return *internal_default_instance();
  }
  static inline const Drain* internal_default_instance() {
    return reinterpret_cast<const Drain*>(
               &_Drain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Drain& a, Drain& b) {
    a.Swap(&b);
  }
  inline void Swap(Drain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Drain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Drain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Drain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Drain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Drain& from) {
    Drain::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Drain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Drain";
  }
  protected:
  explicit Drain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Drain_DrainType DrainType;
  static constexpr DrainType unknown =
    Drain_DrainType_unknown;
  static constexpr DrainType mp4 =
    Drain_DrainType_mp4;
  static constexpr DrainType wav =
    Drain_DrainType_wav;
  static inline bool DrainType_IsValid(int value) {
    return Drain_DrainType_IsValid(value);
  }
  static constexpr DrainType DrainType_MIN =
    Drain_DrainType_DrainType_MIN;
  static constexpr DrainType DrainType_MAX =
    Drain_DrainType_DrainType_MAX;
  static constexpr int DrainType_ARRAYSIZE =
    Drain_DrainType_DrainType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrainType_descriptor() {
    return Drain_DrainType_descriptor();
  }
  template<typename T>
  static inline const std::string& DrainType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrainType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrainType_Name.");
    return Drain_DrainType_Name(enum_t_value);
  }
  static inline bool DrainType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrainType* value) {
    return Drain_DrainType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProcessorsFieldNumber = 3,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated string processors = 3;
  int processors_size() const;
  private:
  int _internal_processors_size() const;
  public:
  void clear_processors();
  const std::string& processors(int index) const;
  std::string* mutable_processors(int index);
  void set_processors(int index, const std::string& value);
  void set_processors(int index, std::string&& value);
  void set_processors(int index, const char* value);
  void set_processors(int index, const char* value, size_t size);
  std::string* add_processors();
  void add_processors(const std::string& value);
  void add_processors(std::string&& value);
  void add_processors(const char* value);
  void add_processors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processors();
  private:
  const std::string& _internal_processors(int index) const;
  std::string* _internal_add_processors();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Drain.DrainType type = 2;
  void clear_type();
  ::Drain_DrainType type() const;
  void set_type(::Drain_DrainType value);
  private:
  ::Drain_DrainType _internal_type() const;
  void _internal_set_type(::Drain_DrainType value);
  public:

  // @@protoc_insertion_point(class_scope:Drain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class Sample final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {}
  ~Sample() override;
  explicit PROTOBUF_CONSTEXPR Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sample& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sample& from) {
    Sample::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sample";
  }
  protected:
  explicit Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesFieldNumber = 10,
    kProcessorsFieldNumber = 11,
    kDrainsFieldNumber = 12,
    kNameFieldNumber = 1,
  };
  // repeated .Source sources = 10;
  int sources_size() const;
  private:
  int _internal_sources_size() const;
  public:
  void clear_sources();
  ::Source* mutable_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Source >*
      mutable_sources();
  private:
  const ::Source& _internal_sources(int index) const;
  ::Source* _internal_add_sources();
  public:
  const ::Source& sources(int index) const;
  ::Source* add_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Source >&
      sources() const;

  // repeated .Processor processors = 11;
  int processors_size() const;
  private:
  int _internal_processors_size() const;
  public:
  void clear_processors();
  ::Processor* mutable_processors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Processor >*
      mutable_processors();
  private:
  const ::Processor& _internal_processors(int index) const;
  ::Processor* _internal_add_processors();
  public:
  const ::Processor& processors(int index) const;
  ::Processor* add_processors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Processor >&
      processors() const;

  // repeated .Drain drains = 12;
  int drains_size() const;
  private:
  int _internal_drains_size() const;
  public:
  void clear_drains();
  ::Drain* mutable_drains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Drain >*
      mutable_drains();
  private:
  const ::Drain& _internal_drains(int index) const;
  ::Drain* _internal_add_drains();
  public:
  const ::Drain& drains(int index) const;
  ::Drain* add_drains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Drain >&
      drains() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Source > sources_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Processor > processors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Drain > drains_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Source

// string name = 1;
inline void Source::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Source::name() const {
  // @@protoc_insertion_point(field_get:Source.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Source::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Source.name)
}
inline std::string* Source::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Source.name)
  return _s;
}
inline const std::string& Source::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Source::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Source::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Source::release_name() {
  // @@protoc_insertion_point(field_release:Source.name)
  return _impl_.name_.Release();
}
inline void Source::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Source.name)
}

// repeated string processors = 2;
inline int Source::_internal_processors_size() const {
  return _impl_.processors_.size();
}
inline int Source::processors_size() const {
  return _internal_processors_size();
}
inline void Source::clear_processors() {
  _impl_.processors_.Clear();
}
inline std::string* Source::add_processors() {
  std::string* _s = _internal_add_processors();
  // @@protoc_insertion_point(field_add_mutable:Source.processors)
  return _s;
}
inline const std::string& Source::_internal_processors(int index) const {
  return _impl_.processors_.Get(index);
}
inline const std::string& Source::processors(int index) const {
  // @@protoc_insertion_point(field_get:Source.processors)
  return _internal_processors(index);
}
inline std::string* Source::mutable_processors(int index) {
  // @@protoc_insertion_point(field_mutable:Source.processors)
  return _impl_.processors_.Mutable(index);
}
inline void Source::set_processors(int index, const std::string& value) {
  _impl_.processors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Source.processors)
}
inline void Source::set_processors(int index, std::string&& value) {
  _impl_.processors_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Source.processors)
}
inline void Source::set_processors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.processors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Source.processors)
}
inline void Source::set_processors(int index, const char* value, size_t size) {
  _impl_.processors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Source.processors)
}
inline std::string* Source::_internal_add_processors() {
  return _impl_.processors_.Add();
}
inline void Source::add_processors(const std::string& value) {
  _impl_.processors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Source.processors)
}
inline void Source::add_processors(std::string&& value) {
  _impl_.processors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Source.processors)
}
inline void Source::add_processors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.processors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Source.processors)
}
inline void Source::add_processors(const char* value, size_t size) {
  _impl_.processors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Source.processors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Source::processors() const {
  // @@protoc_insertion_point(field_list:Source.processors)
  return _impl_.processors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Source::mutable_processors() {
  // @@protoc_insertion_point(field_mutable_list:Source.processors)
  return &_impl_.processors_;
}

// -------------------------------------------------------------------

// Module

// .Module.ModuleType type = 1;
inline void Module::clear_type() {
  _impl_.type_ = 0;
}
inline ::Module_ModuleType Module::_internal_type() const {
  return static_cast< ::Module_ModuleType >(_impl_.type_);
}
inline ::Module_ModuleType Module::type() const {
  // @@protoc_insertion_point(field_get:Module.type)
  return _internal_type();
}
inline void Module::_internal_set_type(::Module_ModuleType value) {
  
  _impl_.type_ = value;
}
inline void Module::set_type(::Module_ModuleType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Module.type)
}

// int32 width = 2;
inline void Module::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Module::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Module::width() const {
  // @@protoc_insertion_point(field_get:Module.width)
  return _internal_width();
}
inline void Module::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Module::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Module.width)
}

// int32 height = 3;
inline void Module::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Module::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Module::height() const {
  // @@protoc_insertion_point(field_get:Module.height)
  return _internal_height();
}
inline void Module::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Module::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Module.height)
}

// int32 sample_rate = 4;
inline void Module::clear_sample_rate() {
  _impl_.sample_rate_ = 0;
}
inline int32_t Module::_internal_sample_rate() const {
  return _impl_.sample_rate_;
}
inline int32_t Module::sample_rate() const {
  // @@protoc_insertion_point(field_get:Module.sample_rate)
  return _internal_sample_rate();
}
inline void Module::_internal_set_sample_rate(int32_t value) {
  
  _impl_.sample_rate_ = value;
}
inline void Module::set_sample_rate(int32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:Module.sample_rate)
}

// int32 channel_num = 5;
inline void Module::clear_channel_num() {
  _impl_.channel_num_ = 0;
}
inline int32_t Module::_internal_channel_num() const {
  return _impl_.channel_num_;
}
inline int32_t Module::channel_num() const {
  // @@protoc_insertion_point(field_get:Module.channel_num)
  return _internal_channel_num();
}
inline void Module::_internal_set_channel_num(int32_t value) {
  
  _impl_.channel_num_ = value;
}
inline void Module::set_channel_num(int32_t value) {
  _internal_set_channel_num(value);
  // @@protoc_insertion_point(field_set:Module.channel_num)
}

// int32 bitrate = 6;
inline void Module::clear_bitrate() {
  _impl_.bitrate_ = 0;
}
inline int32_t Module::_internal_bitrate() const {
  return _impl_.bitrate_;
}
inline int32_t Module::bitrate() const {
  // @@protoc_insertion_point(field_get:Module.bitrate)
  return _internal_bitrate();
}
inline void Module::_internal_set_bitrate(int32_t value) {
  
  _impl_.bitrate_ = value;
}
inline void Module::set_bitrate(int32_t value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:Module.bitrate)
}

// int32 key_frame_interval = 7;
inline void Module::clear_key_frame_interval() {
  _impl_.key_frame_interval_ = 0;
}
inline int32_t Module::_internal_key_frame_interval() const {
  return _impl_.key_frame_interval_;
}
inline int32_t Module::key_frame_interval() const {
  // @@protoc_insertion_point(field_get:Module.key_frame_interval)
  return _internal_key_frame_interval();
}
inline void Module::_internal_set_key_frame_interval(int32_t value) {
  
  _impl_.key_frame_interval_ = value;
}
inline void Module::set_key_frame_interval(int32_t value) {
  _internal_set_key_frame_interval(value);
  // @@protoc_insertion_point(field_set:Module.key_frame_interval)
}

// -------------------------------------------------------------------

// Processor

// string name = 1;
inline void Processor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Processor::name() const {
  // @@protoc_insertion_point(field_get:Processor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Processor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Processor.name)
}
inline std::string* Processor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Processor.name)
  return _s;
}
inline const std::string& Processor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Processor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Processor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Processor::release_name() {
  // @@protoc_insertion_point(field_release:Processor.name)
  return _impl_.name_.Release();
}
inline void Processor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Processor.name)
}

// .Processor.ProcessMediaType type = 2;
inline void Processor::clear_type() {
  _impl_.type_ = 0;
}
inline ::Processor_ProcessMediaType Processor::_internal_type() const {
  return static_cast< ::Processor_ProcessMediaType >(_impl_.type_);
}
inline ::Processor_ProcessMediaType Processor::type() const {
  // @@protoc_insertion_point(field_get:Processor.type)
  return _internal_type();
}
inline void Processor::_internal_set_type(::Processor_ProcessMediaType value) {
  
  _impl_.type_ = value;
}
inline void Processor::set_type(::Processor_ProcessMediaType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Processor.type)
}

// repeated .Module modules = 3;
inline int Processor::_internal_modules_size() const {
  return _impl_.modules_.size();
}
inline int Processor::modules_size() const {
  return _internal_modules_size();
}
inline void Processor::clear_modules() {
  _impl_.modules_.Clear();
}
inline ::Module* Processor::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:Processor.modules)
  return _impl_.modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Module >*
Processor::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:Processor.modules)
  return &_impl_.modules_;
}
inline const ::Module& Processor::_internal_modules(int index) const {
  return _impl_.modules_.Get(index);
}
inline const ::Module& Processor::modules(int index) const {
  // @@protoc_insertion_point(field_get:Processor.modules)
  return _internal_modules(index);
}
inline ::Module* Processor::_internal_add_modules() {
  return _impl_.modules_.Add();
}
inline ::Module* Processor::add_modules() {
  ::Module* _add = _internal_add_modules();
  // @@protoc_insertion_point(field_add:Processor.modules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Module >&
Processor::modules() const {
  // @@protoc_insertion_point(field_list:Processor.modules)
  return _impl_.modules_;
}

// -------------------------------------------------------------------

// Drain

// string name = 1;
inline void Drain::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Drain::name() const {
  // @@protoc_insertion_point(field_get:Drain.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Drain::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Drain.name)
}
inline std::string* Drain::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Drain.name)
  return _s;
}
inline const std::string& Drain::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Drain::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Drain::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Drain::release_name() {
  // @@protoc_insertion_point(field_release:Drain.name)
  return _impl_.name_.Release();
}
inline void Drain::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Drain.name)
}

// .Drain.DrainType type = 2;
inline void Drain::clear_type() {
  _impl_.type_ = 0;
}
inline ::Drain_DrainType Drain::_internal_type() const {
  return static_cast< ::Drain_DrainType >(_impl_.type_);
}
inline ::Drain_DrainType Drain::type() const {
  // @@protoc_insertion_point(field_get:Drain.type)
  return _internal_type();
}
inline void Drain::_internal_set_type(::Drain_DrainType value) {
  
  _impl_.type_ = value;
}
inline void Drain::set_type(::Drain_DrainType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Drain.type)
}

// repeated string processors = 3;
inline int Drain::_internal_processors_size() const {
  return _impl_.processors_.size();
}
inline int Drain::processors_size() const {
  return _internal_processors_size();
}
inline void Drain::clear_processors() {
  _impl_.processors_.Clear();
}
inline std::string* Drain::add_processors() {
  std::string* _s = _internal_add_processors();
  // @@protoc_insertion_point(field_add_mutable:Drain.processors)
  return _s;
}
inline const std::string& Drain::_internal_processors(int index) const {
  return _impl_.processors_.Get(index);
}
inline const std::string& Drain::processors(int index) const {
  // @@protoc_insertion_point(field_get:Drain.processors)
  return _internal_processors(index);
}
inline std::string* Drain::mutable_processors(int index) {
  // @@protoc_insertion_point(field_mutable:Drain.processors)
  return _impl_.processors_.Mutable(index);
}
inline void Drain::set_processors(int index, const std::string& value) {
  _impl_.processors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Drain.processors)
}
inline void Drain::set_processors(int index, std::string&& value) {
  _impl_.processors_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Drain.processors)
}
inline void Drain::set_processors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.processors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Drain.processors)
}
inline void Drain::set_processors(int index, const char* value, size_t size) {
  _impl_.processors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Drain.processors)
}
inline std::string* Drain::_internal_add_processors() {
  return _impl_.processors_.Add();
}
inline void Drain::add_processors(const std::string& value) {
  _impl_.processors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Drain.processors)
}
inline void Drain::add_processors(std::string&& value) {
  _impl_.processors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Drain.processors)
}
inline void Drain::add_processors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.processors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Drain.processors)
}
inline void Drain::add_processors(const char* value, size_t size) {
  _impl_.processors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Drain.processors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Drain::processors() const {
  // @@protoc_insertion_point(field_list:Drain.processors)
  return _impl_.processors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Drain::mutable_processors() {
  // @@protoc_insertion_point(field_mutable_list:Drain.processors)
  return &_impl_.processors_;
}

// -------------------------------------------------------------------

// Sample

// string name = 1;
inline void Sample::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Sample::name() const {
  // @@protoc_insertion_point(field_get:Sample.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sample::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Sample.name)
}
inline std::string* Sample::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Sample.name)
  return _s;
}
inline const std::string& Sample::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Sample::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Sample::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Sample::release_name() {
  // @@protoc_insertion_point(field_release:Sample.name)
  return _impl_.name_.Release();
}
inline void Sample::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Sample.name)
}

// repeated .Source sources = 10;
inline int Sample::_internal_sources_size() const {
  return _impl_.sources_.size();
}
inline int Sample::sources_size() const {
  return _internal_sources_size();
}
inline void Sample::clear_sources() {
  _impl_.sources_.Clear();
}
inline ::Source* Sample::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:Sample.sources)
  return _impl_.sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Source >*
Sample::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:Sample.sources)
  return &_impl_.sources_;
}
inline const ::Source& Sample::_internal_sources(int index) const {
  return _impl_.sources_.Get(index);
}
inline const ::Source& Sample::sources(int index) const {
  // @@protoc_insertion_point(field_get:Sample.sources)
  return _internal_sources(index);
}
inline ::Source* Sample::_internal_add_sources() {
  return _impl_.sources_.Add();
}
inline ::Source* Sample::add_sources() {
  ::Source* _add = _internal_add_sources();
  // @@protoc_insertion_point(field_add:Sample.sources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Source >&
Sample::sources() const {
  // @@protoc_insertion_point(field_list:Sample.sources)
  return _impl_.sources_;
}

// repeated .Processor processors = 11;
inline int Sample::_internal_processors_size() const {
  return _impl_.processors_.size();
}
inline int Sample::processors_size() const {
  return _internal_processors_size();
}
inline void Sample::clear_processors() {
  _impl_.processors_.Clear();
}
inline ::Processor* Sample::mutable_processors(int index) {
  // @@protoc_insertion_point(field_mutable:Sample.processors)
  return _impl_.processors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Processor >*
Sample::mutable_processors() {
  // @@protoc_insertion_point(field_mutable_list:Sample.processors)
  return &_impl_.processors_;
}
inline const ::Processor& Sample::_internal_processors(int index) const {
  return _impl_.processors_.Get(index);
}
inline const ::Processor& Sample::processors(int index) const {
  // @@protoc_insertion_point(field_get:Sample.processors)
  return _internal_processors(index);
}
inline ::Processor* Sample::_internal_add_processors() {
  return _impl_.processors_.Add();
}
inline ::Processor* Sample::add_processors() {
  ::Processor* _add = _internal_add_processors();
  // @@protoc_insertion_point(field_add:Sample.processors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Processor >&
Sample::processors() const {
  // @@protoc_insertion_point(field_list:Sample.processors)
  return _impl_.processors_;
}

// repeated .Drain drains = 12;
inline int Sample::_internal_drains_size() const {
  return _impl_.drains_.size();
}
inline int Sample::drains_size() const {
  return _internal_drains_size();
}
inline void Sample::clear_drains() {
  _impl_.drains_.Clear();
}
inline ::Drain* Sample::mutable_drains(int index) {
  // @@protoc_insertion_point(field_mutable:Sample.drains)
  return _impl_.drains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Drain >*
Sample::mutable_drains() {
  // @@protoc_insertion_point(field_mutable_list:Sample.drains)
  return &_impl_.drains_;
}
inline const ::Drain& Sample::_internal_drains(int index) const {
  return _impl_.drains_.Get(index);
}
inline const ::Drain& Sample::drains(int index) const {
  // @@protoc_insertion_point(field_get:Sample.drains)
  return _internal_drains(index);
}
inline ::Drain* Sample::_internal_add_drains() {
  return _impl_.drains_.Add();
}
inline ::Drain* Sample::add_drains() {
  ::Drain* _add = _internal_add_drains();
  // @@protoc_insertion_point(field_add:Sample.drains)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Drain >&
Sample::drains() const {
  // @@protoc_insertion_point(field_list:Sample.drains)
  return _impl_.drains_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Module_ModuleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Module_ModuleType>() {
  return ::Module_ModuleType_descriptor();
}
template <> struct is_proto_enum< ::Processor_ProcessMediaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Processor_ProcessMediaType>() {
  return ::Processor_ProcessMediaType_descriptor();
}
template <> struct is_proto_enum< ::Drain_DrainType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Drain_DrainType>() {
  return ::Drain_DrainType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sample_2eproto
